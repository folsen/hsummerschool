From trebla at vex.net  Thu Feb  3 01:58:38 2011
From: trebla at vex.net (Albert Y. C. Lai)
Date: Wed, 02 Feb 2011 19:58:38 -0500
Subject: [Haskell-cafe] timely shutdown of timer threads
In-Reply-To: <11F6D72C-5841-4FFF-B3B6-7B5C1DDC5C5E@gmail.com>
References: <84DE9201-9822-4A1A-A17A-682C146C771C@gmail.com>	<4D48C09E.2050001@vex.net>
	<11F6D72C-5841-4FFF-B3B6-7B5C1DDC5C5E@gmail.com>
Message-ID: <4D49FDBE.4050700@vex.net>

On 11-02-02 04:42 PM, Warren Harris wrote:
> It still seems to me that haskell is lacking when it comes to operations that can wait for multiple conditions.

STM opens the avenue to waiting for multiple conditions.

import Control.Concurrent
import Control.Concurrent.STM
import Control.Exception(finally)

data DoOrDie = Do | Die

main = do
   die <- atomically newEmptyTMVar
   finale <- atomically newEmptyTMVar
   forkIO (timeloop die `finally` atomically (putTMVar finale ()))
   putStrLn "press enter to quit"
   getLine
   atomically (putTMVar die Die)
   atomically (takeTMVar finale)

timeloop die = run where
   run = do
     w <- atomically newEmptyTMVar
     i <- forkIO (threadDelay 15000000 >> atomically (putTMVar w Do))
     r <- atomically (takeTMVar w `orElse` takeTMVar die)
     case r of
       Do -> putStrLn "checkpoint" >> run
       Die -> killThread i >> putStrLn "checkmate"


