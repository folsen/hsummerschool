From fischer at nii.ac.jp  Wed Aug 24 07:54:14 2011
From: fischer at nii.ac.jp (Sebastian Fischer)
Date: Wed, 24 Aug 2011 14:54:14 +0900
Subject: [Haskell-cafe] a minor bug (memory leak) in ListLike package
In-Reply-To: <CA+u6gbzyx=_d6BbGtZ86GYpfDx3jg8o6zpM8Tcu3958wPpOffg@mail.gmail.com>
References: <4E544F7D.8030401@gmail.com>
	<CA+u6gbzyx=_d6BbGtZ86GYpfDx3jg8o6zpM8Tcu3958wPpOffg@mail.gmail.com>
Message-ID: <CALoEywMxxgsZaC9CqgfT7ztgdkV-s3of_UtHsRYj5v1k6paMRA@mail.gmail.com>

On Wed, Aug 24, 2011 at 10:47 AM, Ivan Lazar Miljenovic
<ivan.miljenovic at gmail.com> wrote:
> On 24 August 2011 11:10, bob zhang <bobzhang1988 at gmail.com> wrote:
>> Hi, John, there is a space leak problem in ListLike typeclass,
>> in the method genericLength
>> calclen !accum cl =
>> calclen accum cl =
>
> I _think_ this may cause problems with some data types (e.g.
> http://hackage.haskell.org/packages/archive/numbers/2009.8.9/doc/html/Data-Number-Natural.html
> ) that require the extra laziness (that is, you can do things like ` 3
> < genericLength [1..] ' and have it return True).

Does the current version support this? The use of an accumulator (that
is presumably returned after consuming the complete input) seems to
suggest that your example would diverge anyway (but I did not try).

Sebastian


