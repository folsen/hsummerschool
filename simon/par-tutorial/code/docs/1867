From bos at serpentine.com  Mon Dec 12 18:32:04 2011
From: bos at serpentine.com (Bryan O'Sullivan)
Date: Mon, 12 Dec 2011 09:32:04 -0800
Subject: [Haskell-cafe] Splitting off many/some from Alternative
In-Reply-To: <CAECnf4DtEDnf4Z+Z7MKZ731f+c6t+ZGLDPkTDWt36MSsqXLm4g@mail.gmail.com>
References: <1FA8D361-5F28-4FE4-AAE8-1761B98E6381@gmail.com>
	<CACw0niK9Bv6q3UxMk8XHtb_=6KsrHTn-4mkjhDDEUX_LdmAqYQ@mail.gmail.com>
	<CAECnf4DtEDnf4Z+Z7MKZ731f+c6t+ZGLDPkTDWt36MSsqXLm4g@mail.gmail.com>
Message-ID: <CACw0ni+xEokzO6K7gkGT=SwaggGqG-HkNq+bsyqvj4ZQFaKhwg@mail.gmail.com>

On Mon, Dec 12, 2011 at 9:23 AM, Carl Howells <chowells79 at gmail.com> wrote:

> > There is absolutely no implication of consuming anything in the
> definitions
> > of many or some. This is how they happen to behave when used in the
> context
> > of some parsing libraries, but that's all. If many or some always go
> into an
> > infinite loop for some Alternative instance, then I suspect that the
> > instance itself is either broken or shouldn't exist.
>
> So, then...  The instance for Maybe shouldn't exist?
>

Don't be silly. The purpose of some and many is to be used with combinators
that are expected to fail sometimes. If you use them with combinators that
always succeed, of course you're going to get an infinite loop. Would you
propose to ban recursive functions because they might not terminate?

Apparently the confusion here lies with the fact that the documentation for
some and many are too terse for their behaviour to be easily understood.
That's a whole different category of problem than "ban them!".
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.haskell.org/pipermail/haskell-cafe/attachments/20111212/22ecb4b8/attachment.htm>

