From dev at mobileink.com  Fri Dec 30 19:45:51 2011
From: dev at mobileink.com (Gregg Reynolds)
Date: Fri, 30 Dec 2011 12:45:51 -0600
Subject: [Haskell-cafe] On the purity of Haskell
In-Reply-To: <CAD6SzRK5fGhGFiXm_r-K_bmQwF1W9FKAURuhnxjpKdfbW1Ma6A@mail.gmail.com>
References: <4EFB5468.4000607@blueyonder.co.uk> <jdfv46$7r3$1@dough.gmane.org>
	<4EFB8DFE.1060805@blueyonder.co.uk> <jdh9h6$gba$1@dough.gmane.org>
	<4EFCA66D.4060609@blueyonder.co.uk> <jdiesl$5sp$1@dough.gmane.org>
	<4EFCCA86.4020709@blueyonder.co.uk> <jdjtv1$6r0$1@dough.gmane.org>
	<CAD6SzRLxjE7Xgi6dXMknwt0oFRN_m3Z868jAKnsayR=w1=Se6w@mail.gmail.com>
	<FD41967A-36F7-4203-87E3-D4392146C53D@mobileink.com>
	<1325265063.16545.189.camel@godel>
	<CAD6SzRK5fGhGFiXm_r-K_bmQwF1W9FKAURuhnxjpKdfbW1Ma6A@mail.gmail.com>
Message-ID: <7F9B78C4-0AED-45F5-8DA9-D7F407B4F70E@mobileink.com>


On Dec 30, 2011, at 11:21 AM, Conal Elliott wrote:

> 
> And I also raised a more fundamental question than whether this claim of sameness is true, namely what is equality on IO? Without a precise & consistent definition of equality, the claims like "f 42 == f (43 - 1)" are even defined, let alone true. And since the conversation is about Haskell IO, I'm looking for a definition that applies to all of IO, not just some relatively well-behaved subset like putchar/getchar+IORefs+threads.

Well, you'll no doubt be glad to know I think I've said about all I need to say on this topic, but I'll add one more thing.  Threads like this I often find useful even when I disagree vehemently with various parties.  In this case an old idea I'd forgotten about was suddenly dislodged by the discussion.  A few years ago - the last time I got involved in a discussion on Haskell semantics - I spent some time sketching out ideas for using random variables to provide definitions (or at least notation) for stuff like IO.  I'm not sure I could even find the notes now, but my recollection is that it seemed like a promising approach.  One advantage is that this eliminates the kind of informal language (like "user input") that seems unavoidable in talking about IO.  Instead of defining e.g. readChar or the like as an "action" that does something and returns an char (or however standard Haskell idiom puts it), you can just say that readChar is a random char variable and be done with it.  The notion of "doing an action" goes away.  The side-effect of actually reading the input or the like can be defined generically by saying that evaluating a random variable always has some side-effect; what specifically the side effect is does not matter.  I mention this as a possible approach for anybody looking for a better way of accounting for IO in Haskell.

Cheers,

Gregg

