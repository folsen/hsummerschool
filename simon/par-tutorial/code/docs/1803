From noteed at gmail.com  Sat Dec 10 11:12:48 2011
From: noteed at gmail.com (Vo Minh Thu)
Date: Sat, 10 Dec 2011 11:12:48 +0100
Subject: [Haskell-cafe] Generating Code
In-Reply-To: <CAB2TPRA3+VKzv_5egN0_9cghj2qZP0CuJ=moUFO3=zBxFSzKkg@mail.gmail.com>
References: <CAHTd3sihZABoWe7CoKhfFh-QHQ01PftATrTmiZymE5b-D_YS+Q@mail.gmail.com>
	<CAPeieQEdWhripdkdVo-=2ZXbNdgOL7Xq+idrwzTOiZuL=AMtZQ@mail.gmail.com>
	<CAHTd3sis-hH=mAuQDfOo-1FMOgOPSTs4eFE4f0wLTfx9nXcS8A@mail.gmail.com>
	<CAB2TPRA3+VKzv_5egN0_9cghj2qZP0CuJ=moUFO3=zBxFSzKkg@mail.gmail.com>
Message-ID: <CAOHoMskofLtpJUSPcteQwG=VZiwi8e+PA0kMC7QduEOoKcwhKQ@mail.gmail.com>

2011/12/9 Stephen Tetley <stephen.tetley at gmail.com>:
> Geoffrey Mainland did significant work generating C with his GHC quasi
> quote extension. I'm not sure the status or availability of the code
> but there was a good Haskell Workshop paper describing it.
>
> For the specific problem of OpenGL - as the package already exists I'm
> not sure a generative approach would actually pay its way

I believe it is the right approach, and the one used originally.

Whenever you will want to add appearing functionalities (from later
OpenGL specs) or modify something (debugging facilities), having a
generative approach will pay.

Actually, from the OpenGL spec files, there is a lot that can be done,
not just OpenGL bindings.

As for the OP original question, I wonder why he wants to add comments
in the generated code. That code should be a straightforward mapping
to the original C API. No need to document it. Documentation would be
good for higher-level bindings but not for one corresponding tightly
to the specs files.

Of course some documentation about the used conventions and other
generic properties of the bindings would be usefull, but I don't see
any reason to generate documentation as part of the generated code.

Cheers,
Thu


