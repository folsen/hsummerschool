From apfelmus at quantentunnel.de  Fri Dec 30 09:49:37 2011
From: apfelmus at quantentunnel.de (Heinrich Apfelmus)
Date: Fri, 30 Dec 2011 09:49:37 +0100
Subject: [Haskell-cafe] On the purity of Haskell
In-Reply-To: <4EFCCA86.4020709@blueyonder.co.uk>
References: <4EFB5468.4000607@blueyonder.co.uk>	<jdfv46$7r3$1@dough.gmane.org>	<4EFB8DFE.1060805@blueyonder.co.uk>	<jdh9h6$gba$1@dough.gmane.org>
	<4EFCA66D.4060609@blueyonder.co.uk>	<jdiesl$5sp$1@dough.gmane.org>
	<4EFCCA86.4020709@blueyonder.co.uk>
Message-ID: <jdjtv1$6r0$1@dough.gmane.org>

Steve Horne wrote:
> Heinrich Apfelmus wrote:
>>
>> Maybe it helps to try to find an example of a function  f :: A -> B  
>> for some cleverly chosen types A,B that is not pure, i.e. does not 
>> return the same values for equal arguments.
>
> [..] 
> For your specific challenge, place that as a left-hand argument in a 
> bind...
> 
> f :: Int -> IO Int
> f = getAnIntFromTheUser >>= \i -> return (i+1)
> 
> Well, the value of i isn't decidable until runtime. The value of i+1 is 
> not decidable until runtime. The value of return (i+1) is not decidable 
> until runtime and so on. It can only be partially evaluated at 
> compile-time, but when it is fully evaluated, you get a different IO 
> action returned by f depending on what Int you got from the user.

The function

   f :: Int -> IO Int
   f x = getAnIntFromTheUser >>= \i -> return (i+x)

is pure according to the common definition of "pure" in the context of 
purely functional programming. That's because

   f 42 = f (43-1) = etc.

Put differently, the function always returns the same IO action, i.e. 
the same value (of type  IO Int) when given the same parameter.



Best regards,
Heinrich Apfelmus

--
http://apfelmus.nfshost.com



