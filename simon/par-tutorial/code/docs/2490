From dev at mobileink.com  Fri Dec 30 18:50:47 2011
From: dev at mobileink.com (Gregg Reynolds)
Date: Fri, 30 Dec 2011 11:50:47 -0600
Subject: [Haskell-cafe] On the purity of Haskell
In-Reply-To: <jdkrqo$3cq$1@dough.gmane.org>
References: <4EFB5468.4000607@blueyonder.co.uk>
	<jdfv46$7r3$1@dough.gmane.org>	<4EFB8DFE.1060805@blueyonder.co.uk>
	<jdh9h6$gba$1@dough.gmane.org>	<4EFCA66D.4060609@blueyonder.co.uk>
	<jdiesl$5sp$1@dough.gmane.org>	<4EFCCA86.4020709@blueyonder.co.uk>
	<jdjtv1$6r0$1@dough.gmane.org>
	<CAD6SzRLxjE7Xgi6dXMknwt0oFRN_m3Z868jAKnsayR=w1=Se6w@mail.gmail.com>
	<jdkrqo$3cq$1@dough.gmane.org>
Message-ID: <DCC7783F-C6F6-4F34-8B57-BE5AB138962B@mobileink.com>


On Dec 30, 2011, at 11:19 AM, Heinrich Apfelmus wrote:

> Conal Elliott wrote:
>> Heinrich Apfelmus wrote:
>>> The function
>>> 
>>> f :: Int -> IO Int
>>> f x = getAnIntFromTheUser >>= \i -> return (i+x)
>>> 
>>> is pure according to the common definition of "pure" in the context of
>>> purely functional programming. That's because
>>> 
>>> f 42 = f (43-1) = etc.
>>> 
>>> Put differently, the function always returns the same IO action, i.e. the
>>> same value (of type  IO Int) when given the same parameter.
>>> 
>> Two questions trouble me:
>> How can we know whether this claim is true or not?
>> What does the claim even mean, i.e., what does "the same IO action" mean,
>> considering that we lack a denotational model of IO?
> 
> I think you can put at least these troubles to rest by noting that  f 42  and  f (43-1)  are intentionally equal, even though you're not confident on their extensional meaning.

(I think you meant "intensionally").  Ok, I think I can go with that, something like "f 42 means the sum of 42 and the user input".  And I suppose one could argue that the extension of f is well-defined as the set of integer pairs.  But that does not make f a (computable) function, because the mapping from domain to co-domain remains undefined, dependent as it is on IO.

-Gregg

