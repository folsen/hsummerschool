From alexey.skladnoy at gmail.com  Sun Feb  6 22:12:41 2011
From: alexey.skladnoy at gmail.com (Alexey Khudyakov)
Date: Mon, 07 Feb 2011 00:12:41 +0300
Subject: [Haskell-cafe] Byte Histogram
In-Reply-To: <AANLkTik1NpiS-E5xV3hNQFO1-s8Vd4g_CJCPGJXM2J68@mail.gmail.com>
References: <4D4B19DB.5000907@btinternet.com>	<201102032237.33997.daniel.is.fischer@googlemail.com>	<4D4D69DF.5050002@btinternet.com>	<AANLkTikGbr6o=kU7m4Vubz4NXGKR5uzSBhx01vzLXm02@mail.gmail.com>	<4D4EFB05.2040902@btinternet.com>
	<AANLkTik1NpiS-E5xV3hNQFO1-s8Vd4g_CJCPGJXM2J68@mail.gmail.com>
Message-ID: <4D4F0EC9.8060005@gmail.com>

On 06.02.2011 23:29, Johan Tibell wrote:
> On Sun, Feb 6, 2011 at 8:48 PM, Andrew Coppin
> <andrewcoppin at btinternet.com>  wrote:
>> In particular, I get strange looks from people in the OOP community when I
>> say I'm using a language that doesn't have any abstractions at all for
>> dealing polymorphically with containers. In general, it's almost impossible
>> to write a Haskell function that will work with a list, an (immutable)
>> array, a hash table or a map, polymorphically.
>>
> I think one reason we haven't seen a type class for containers is that
> it isn't easy to create one using vanilla type classes (see Simon PJ's
> paper on the topic.)
>
Well Foldable and Traversable provide set of generic operations for 
containers. Although they are quite limited, containter must be 
polymorphic (e.g. no IntMap) and parameter must be of any type (e.g. no 
unboxed vectors) both are still quite useful.

Also there is a container-classes package which provide set of type 
class for containers.

[1] http://hackage.haskell.org/package/container-classes


