From aslatter at gmail.com  Fri Dec  9 23:27:31 2011
From: aslatter at gmail.com (Antoine Latter)
Date: Fri, 9 Dec 2011 16:27:31 -0600
Subject: [Haskell-cafe] Generating Code
In-Reply-To: <CAPeieQEdWhripdkdVo-=2ZXbNdgOL7Xq+idrwzTOiZuL=AMtZQ@mail.gmail.com>
References: <CAHTd3sihZABoWe7CoKhfFh-QHQ01PftATrTmiZymE5b-D_YS+Q@mail.gmail.com>
	<CAPeieQEdWhripdkdVo-=2ZXbNdgOL7Xq+idrwzTOiZuL=AMtZQ@mail.gmail.com>
Message-ID: <CAKjSnQE2owa4YK0G0MTR0ON1CBqMiuWQntRrqmsxSL1tYjSxxg@mail.gmail.com>

On Fri, Dec 9, 2011 at 2:17 PM, Erik Hesselink <hesselink at gmail.com> wrote:
> On Fri, Dec 9, 2011 at 20:45, L Corbijn <aspergesoepje at gmail.com> wrote:
>> So I'm interested if there are other libraries that are more suitable
>> to the task of generating haskell code for library use, and thus
>> generate 'human readable' exported code (so no TH). I'm also
>> interested in how other projects generate code for their packages.
>
> Since you ask how other packages solve this problem, and since most
> packages use template haskell, I have to ask: why can't you use
> template haskell for this?
>

For my case, template haskell can't create modules, and template
haskell solves a different problem - I've not interested in creating
Haskell declarations from Haskell declarations - I'm interested in
creating Haskell modules from an external, formal,  specification. In
a sense I'm compiling to Haskell.

> Another option (also not code generation, but very useful in reducing
> boilerplate) is generic programming, for example using the 'regular'
> package, or the new generics in GHC 7.2.
>
> Erik
>
> _______________________________________________
> Haskell-Cafe mailing list
> Haskell-Cafe at haskell.org
> http://www.haskell.org/mailman/listinfo/haskell-cafe


