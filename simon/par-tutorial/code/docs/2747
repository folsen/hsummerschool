From aditya.siram at gmail.com  Sat Feb  5 16:41:33 2011
From: aditya.siram at gmail.com (aditya siram)
Date: Sat, 5 Feb 2011 09:41:33 -0600
Subject: [Haskell-cafe] Concurrency best practices?
In-Reply-To: <4D4D1C63.2000906@freegeek.org>
References: <4D4D1C63.2000906@freegeek.org>
Message-ID: <AANLkTinv2=vLdB5Dx4vhnOHJ+9=RFWEsr5AKh8LtzO4L@mail.gmail.com>

There's the stm-io-hooks [1] package but it looks like it hasn't been
updated in a while.
-deech
[1]http://hackage.haskell.org/package/stm-io-hooks

On Sat, Feb 5, 2011 at 3:46 AM, wren ng thornton <wren at freegeek.org> wrote:
> So I'm working on a project that uses STM to run a lot of things in parallel
> without the headaches of locks. So far it's working beautifully, STM rocks.
> But there's one snag...
>
> Sometimes I need those threads to do some IO like printing logging info. I'd
> like to make these IO chunks atomic with respect to one another so that the
> logging output isn't garbage. Since I'm using STM everywhere else, I'd love
> to use it for this too (instead of mixing STM and non-STM concurrency)
> except you can't embed IO in STM.
>
> I could just use STM vars as locks to force the atomicity, but locks are
> ugly and bug-prone. So what's the current best practice for doing this kind
> of thing?
>
> --
> Live well,
> ~wren
>
> _______________________________________________
> Haskell-Cafe mailing list
> Haskell-Cafe at haskell.org
> http://www.haskell.org/mailman/listinfo/haskell-cafe
>


