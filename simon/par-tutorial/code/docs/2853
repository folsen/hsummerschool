From jwlato at gmail.com  Tue Feb  8 13:41:11 2011
From: jwlato at gmail.com (John Lato)
Date: Tue, 8 Feb 2011 12:41:11 +0000
Subject: [Haskell-cafe] Byte Histogram
In-Reply-To: <AANLkTikSRKx7w_af8etS=oVriuD2qKwP3Yjq1-cUyOaS@mail.gmail.com>
References: <AANLkTinkP3V6AopOA+CrwkeQCWRMHtTzKzro3VOWxhiS@mail.gmail.com>
	<AANLkTikgiT9ujJi5PpLxr4-E8aWyOfVRog_yaDPs2MHC@mail.gmail.com>
	<AANLkTikfLUnyq8GPPhRzcYan__gb1SENN9vvRwvuVLnb@mail.gmail.com>
	<AANLkTikSRKx7w_af8etS=oVriuD2qKwP3Yjq1-cUyOaS@mail.gmail.com>
Message-ID: <AANLkTi=JxnoUThHO-K4tp-_PhZ07jMAQXtaN1+jNjLdG@mail.gmail.com>

On Tue, Feb 8, 2011 at 12:33 PM, Ivan Lazar Miljenovic <
ivan.miljenovic at gmail.com> wrote:

> On 8 February 2011 23:25, John Lato <jwlato at gmail.com> wrote:
> >> class Container c where
> >>     type Elem c :: *
> >>
> >> class (Container cIn, Container cOut) => CMap cIn cOut where
> >>     cmap :: (Elem cIn -> Elem cOut) -> cIn -> cOut
> >>
> >> instance (a ~ Elem (c a), b ~ Elem (c b), Functor c, Container (c a),
> >> Container (c b)) => CMap (c a) (c b) where
> >>     cmap = fmap
>
> I'm not sure if that will work for types like Set, as you're not
> explicitly bringing the constraint in.


It won't work for Set, but Set's not a functor.  In this case just write
this instance instead:

> instance (Ord a, Ord b) => CMap (Set a) (Set b) where
>     cmap = Set.map

John
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.haskell.org/pipermail/haskell-cafe/attachments/20110208/bf5758d5/attachment.htm>

