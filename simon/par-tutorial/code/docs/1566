From oscarpicasso at gmail.com  Wed Aug 31 22:38:32 2011
From: oscarpicasso at gmail.com (Oscar Picasso)
Date: Wed, 31 Aug 2011 16:38:32 -0400
Subject: [Haskell-cafe] Project Euler: request for comments
In-Reply-To: <CAMLKXykOn3-AZRVG4=g8Vf5qebrct5HzzKrvD-r3179uCdd4Gg@mail.gmail.com>
References: <CAPkMFPnCdD4Od5ff6AZ8pu5peR_puk2y+ygZeuPLPX_Y4tUPhw@mail.gmail.com>
	<CAMLKXym5FPaWa38+LrrFw7oiLnZtSZq1Kn1zpBwn_udH_L-Drw@mail.gmail.com>
	<CAPkMFPkSb+b_qfedTSMQKCTHV5GUROZSMVWt0aLNGD5g35XoGQ@mail.gmail.com>
	<CAMLKXym3VR1EGvXg5n0p1xuH1zbueejdkHLF_aRjkPVerLBzDQ@mail.gmail.com>
	<CAPkMFPnJ54YhqjGwWURhzX1O_zMsZXDpzwvsU_Npi61O1T_BOQ@mail.gmail.com>
	<CAMLKXynw0-criA1sCq3CxsdEPpj9SFh+gNpbyEa_eB1C=mzxXQ@mail.gmail.com>
	<CAPkMFPmB6oHgknOy0vhOCJ50RmdKWP78F7DsmOGquLSvubJT0w@mail.gmail.com>
	<CAPkMFPmZPxWsCG2Bm6g-4JZf+hoyZnvmf_NTAmQORjc21Gf+=A@mail.gmail.com>
	<CAMLKXy=jDX0MhBQ-0qpBYBFB9poPgmNTLvdV+F_yttpJ26LnUQ@mail.gmail.com>
	<CAPkMFP=Py1+Kjin9mFU+-E7cDOwxbyzSyosLuqD1Zhv31ivzfA@mail.gmail.com>
	<CAMLKXykOn3-AZRVG4=g8Vf5qebrct5HzzKrvD-r3179uCdd4Gg@mail.gmail.com>
Message-ID: <CAPkMFPnZ1vU2f-pjEh=+D9HHPwU9_GU2hULzuj1MJ0hvJx3TPA@mail.gmail.com>

In that case, maybe we could just get rid of the helper function and just write:

g (t:u:v:w:[]) = t*u*v*w
g (t:u:v:w:ws) = max (t*u*v*w) (g (u:v:w:ws))

By the way, what make you think that mutual recursion would use more
stack space than single recursion?

Oscar

On Tue, Aug 30, 2011 at 7:19 PM, KC <kc1956 at gmail.com> wrote:
> You also don't need mutual recursion for this explicit recursion since
> I imagine it would use up more stack space.
>
>
> -- Doing the one dimensional case.
> f011 :: [Int] -> Int
> f011 (t:u:v:xs) = f011helper t u v xs
>
> f011helper :: Int -> Int -> Int -> [Int] -> Int
> f011helper t u v (w:ws)
> ? ?| ws == [] ?= t*u*v*w
> ? ?| otherwise = max (t*u*v*w) (f011helper u v w ws)
>
>
> -- Note: f011helper does not call f011.
>
>
> On Mon, Aug 29, 2011 at 9:40 AM, Oscar Picasso <oscarpicasso at gmail.com> wrote:
>> Got it.
>>
>> f :: [Int] -> Int
>> f (t:u:v:xs) = helper t u v xs
>>
>> helper :: Int -> Int -> Int -> [Int] -> Int
>> helper t u v (w:ws)
>> ?| ws == [] ?= t*u*v*w
>> ?| otherwise = max (t*u*v*w) (f (u:v:w:ws))
>>
>> I tend to overlook mutual recursion in my toolbox.
>
> Good going! :)
>
>>
>> Thanks for the enlightenment.
>>
>> On Sun, Aug 28, 2011 at 4:54 PM, KC <kc1956 at gmail.com> wrote:
>>> Try something like the following:
>>>
>>> -- Project Euler 11
>>>
>>> -- In the 20?20 grid below, four numbers along a diagonal line have
>>> been marked in red.
>>>
>>> -- <snip>
>>>
>>> -- The product of these numbers is 26 ? 63 ? 78 ? 14 = 1788696.
>>>
>>> -- What is the greatest product of four adjacent numbers in any
>>> direction (up, down, left, right, or diagonally) in the 20?20 grid?
>>>
>>>
>>> import Data.List
>>>
>>> -- Doing the one dimensional case.
>>> f011 :: [Int] -> Int
>>> f011 (t:u:v:xs) = f011helper t u v xs
>>>
>>> f011helper :: Int -> Int -> Int -> [Int] -> Int
>>> f011helper t u v (w:ws)
>>> ? ?| ws == [] ?= t*u*v*w
>>> ? ?| otherwise = yada nada mada
>>>
>>> -- What are yada nada mada?
>>>
>>> -- The 20x20 grid case will become:
>>> f0112D :: [[Int]] -> Int
>>> -- where [[Int]] is a list of lists of rows, columns, major diagonals,
>>> & minor diagonals.
>>>
>
> --
> --
> Regards,
> KC
>


