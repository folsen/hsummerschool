From byorgey at seas.upenn.edu  Thu Dec 15 16:05:40 2011
From: byorgey at seas.upenn.edu (Brent Yorgey)
Date: Thu, 15 Dec 2011 10:05:40 -0500
Subject: [Haskell-cafe] [Alternative] some/many narrative
In-Reply-To: <CA+qNEzJOdYjmjuob59jZA7Qk98VQbmr+gxcZf7bm9qOAFwn-iw@mail.gmail.com>
References: <C561B101-D6D2-458C-98D4-7EEFCB5E60F5@gmail.com>
	<CA+qNEzJOdYjmjuob59jZA7Qk98VQbmr+gxcZf7bm9qOAFwn-iw@mail.gmail.com>
Message-ID: <20111215150539.GA24931@seas.upenn.edu>

On Thu, Dec 15, 2011 at 07:29:20PM +1300, Chris Wong wrote:
> > Okay, so how about the following as a user narrative for some and many?
> >
> > ...
> 
> I was in the middle of writing my own version of Applicative when I
> stumbled on this intense debate. Here's what I wrote for the
> documentation:
> 
> class (Applicative f, Monoid f) => Alternative f where

Note that 'Monoid f' does not make sense, since the kinds do not
match. Perhaps what you mean is  (forall a. Monoid (f a)) but that is
(currently) impossible to express.  One could, of course, make a new
typeclass

  class Monoid1 f where
    mempty1 :: f a
    mappend1 :: f a -> f a -> f a

-Brent


