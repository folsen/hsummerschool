From jerzy.karczmarczuk at unicaen.fr  Thu Dec 29 21:39:25 2011
From: jerzy.karczmarczuk at unicaen.fr (Jerzy Karczmarczuk)
Date: Thu, 29 Dec 2011 21:39:25 +0100
Subject: [Haskell-cafe] On the purity of Haskell /Random generators
In-Reply-To: <451591325188516@web70.yandex.ru>
References: <4EFB5468.4000607@blueyonder.co.uk>
	<jdfv46$7r3$1@dough.gmane.org>	<CAO40MikNjaUtfFkFE_-TKao0xX=rF3xy36UPoJvgviRar=pdDQ@mail.gmail.com>	<20111229151652.1261E93C2E@mail.avvanta.com>
	<6B376209-7CEC-467E-9DF7-649426E0B764@mobileink.com>
	<jdieke$48q$1@dough.gmane.org> <4EFCC3CE.7050006@blueyonder.co.uk>
	<451591325188516@web70.yandex.ru>
Message-ID: <4EFCCFFD.9080908@unicaen.fr>

The story begins here:

Steve Horne:

    /BTW - why use an IO action for random number generation? There's a
    perfectly good pure generator. It's probably handy to treat it
    monadically to sequence the generator state/seed/whatever but random
    number generation can be completely pure. /

===================

Bardur Arantsson:

    /*Pseudo* random number generation can of course be pure (though
    threading the state would be tedious and error-prone). If you want
    truly random numbers you cannot avoid IO (the monad). /

??? ??????? :
> If seed depends of psudo random event, for example of current systime,
> we must use IO action.
Bardur, Lev, of course you try to be helpful, but you are answering 
wrong questions.

"Truly random" numbers are very rarely used, forget about them. 
"Standard" r. generators (pseudo-random) in Haskell are monadic, because 
the relevant algorithms are stateful.
Congruential, Fibonacci, Mersenne Twister, whatever, is a function, more 
or less:
(newValue,newSeed) = rgen seed

The monadic approach serves mainly to hide the seed.
Some people prefer to use random streams, no monads, so the question of 
Steve Horne is not universal.
But anyway, even without bind, the user will have to chain the seeds in 
some way.

Still, I dont understand what does S.H.  mean by a "perfectly good pure 
generator".
Tell more please (unless you just mean a stream, say:

str = map fst (iterate (\(v,sd) -> rgen sd) (v0,sd0))
)

Jerzy


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.haskell.org/pipermail/haskell-cafe/attachments/20111229/45f19ded/attachment.htm>

