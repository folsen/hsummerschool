From sh006d3592 at blueyonder.co.uk  Thu Dec 29 21:20:48 2011
From: sh006d3592 at blueyonder.co.uk (Steve Horne)
Date: Thu, 29 Dec 2011 20:20:48 +0000
Subject: [Haskell-cafe] On the purity of Haskell
In-Reply-To: <jdigj8$gie$1@dough.gmane.org>
References: <4EFB5468.4000607@blueyonder.co.uk>
	<jdfv46$7r3$1@dough.gmane.org>	<CAO40MikNjaUtfFkFE_-TKao0xX=rF3xy36UPoJvgviRar=pdDQ@mail.gmail.com>	<20111229151652.1261E93C2E@mail.avvanta.com>
	<6B376209-7CEC-467E-9DF7-649426E0B764@mobileink.com>
	<jdieke$48q$1@dough.gmane.org> <4EFCC3CE.7050006@blueyonder.co.uk>
	<jdigj8$gie$1@dough.gmane.org>
Message-ID: <4EFCCBA0.1070009@blueyonder.co.uk>

On 29/12/2011 19:55, Bardur Arantsson wrote:
> On 12/29/2011 08:47 PM, Steve Horne wrote:
>> On 29/12/2011 19:21, Heinrich Apfelmus wrote:
>>>
>> BTW - why use an IO action for random number generation? There's a
>> perfectly good pure generator. It's probably handy to treat it
>> monadically to sequence the generator state/seed/whatever but random
>> number generation can be completely pure.
>
> *Pseudo* random number generation can of course be pure (though 
> threading the state would be tedious and error-prone). If you want 
> truly random numbers you cannot avoid IO (the monad).
On the threading the state thing - it doesn't matter whether it's the IO 
monad or the State monad (a perfect wrapper for the seed).

For where-does-the-entropy-come-from, though, yes - I guess you're right.



