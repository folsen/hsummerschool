From sh006d3592 at blueyonder.co.uk  Thu Dec 29 21:16:06 2011
From: sh006d3592 at blueyonder.co.uk (Steve Horne)
Date: Thu, 29 Dec 2011 20:16:06 +0000
Subject: [Haskell-cafe] On the purity of Haskell
In-Reply-To: <jdiesl$5sp$1@dough.gmane.org>
References: <4EFB5468.4000607@blueyonder.co.uk>
	<jdfv46$7r3$1@dough.gmane.org>	<4EFB8DFE.1060805@blueyonder.co.uk>
	<jdh9h6$gba$1@dough.gmane.org> <4EFCA66D.4060609@blueyonder.co.uk>
	<jdiesl$5sp$1@dough.gmane.org>
Message-ID: <4EFCCA86.4020709@blueyonder.co.uk>

On 29/12/2011 19:26, Heinrich Apfelmus wrote:
> Steve Horne wrote:
>> Heinrich Apfelmus wrote:
>>>
>>> Again, purity refers to the semantics of functions (at run-time): 
>>> given the same argument, will a function always return the same 
>>> result? The answer to this question solely decides whether the 
>>> language is pure or impure. Note that this depends on the meaning of 
>>> "function" within that language. In C, side-effects are part of the 
>>> semantics of functions, so it's an impure language. In Haskell, on 
>>> the other hand, functions will always return the same result, so the 
>>> language is pure. You could say that side effects have been moved 
>>> from functions to some other type (namely IO) in Haskell.
>>
>> Anyway, if you're using IO actions, your code is not referentially 
>> transparent and is therefore impure - by your own definition of 
>> "impure". Causing side-effects may not be pedantically the issue, but 
>> the mix of causing and reacting to them - ie interacting with the 
>> "outside" - clearly means that some of your function results are 
>> dependent on what's happening "outside" your program. That includes 
>> side-effects "outside" your program yet caused by program program.
>
> No, that's not my definition of "impure". Also, my Haskell code is 
> referentially transparent even though I'm using IO actions. If this 
> sounds paradoxical, then it's probably worth mulling about some more. 
> Maybe it helps to try to find an example of a function  f :: A -> B  
> for some cleverly chosen types A,B that is not pure, i.e. does not 
> return the same values for equal arguments.
That doesn't prove Haskell pure.

Of course your challenge looks like a safe one. It can't be done because 
the IO monad is a black box - you can't e.g. pattern-match on it's data 
constructors.

Of course you can extract values out of IO actions to work with them - 
the bind operator does this for you nicely, providing the value as an 
argument to the function you pass to the right-hand argument of the 
bind. But that function returns another IO action anyway - although 
you've extracted a value out and the value affects a computation, all 
you can do with it in the long run is return another IO action.

Even so, that value can only be extracted out at run-time, after the 
action is executed.

So, consider the following...

getAnIntFromTheUser :: IO Int

