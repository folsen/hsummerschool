From jerzy.karczmarczuk at unicaen.fr  Thu Dec 29 19:00:20 2011
From: jerzy.karczmarczuk at unicaen.fr (Jerzy Karczmarczuk)
Date: Thu, 29 Dec 2011 19:00:20 +0100
Subject: [Haskell-cafe] On the purity of Haskell
In-Reply-To: <20111229170135.GE17094@google.com>
References: <4EFB5468.4000607@blueyonder.co.uk> <jdfv46$7r3$1@dough.gmane.org>
	<CAO40MikNjaUtfFkFE_-TKao0xX=rF3xy36UPoJvgviRar=pdDQ@mail.gmail.com>
	<20111229132335.GY17094@google.com> <4EFC9AAD.5040906@unicaen.fr>
	<20111229165524.GD17094@google.com>
	<20111229170135.GE17094@google.com>
Message-ID: <4EFCAAB4.7050207@unicaen.fr>

Le 29/12/2011 18:01, Iustin Pop a ?crit :
>> I'm confused as what you mean.
> And to clarify better my original email: yes, (bar x) always gives you
> back the same IO action; but the results of said IO action are/can be
> different when executed.
The whole of my point is that it DOESN'T MATTER. (And I believe that 
Heinrich A. meant the same thing).
I asked for the execution trace in order that you see what your function 
does to the programme itself, not that it attempts to contact the 
external world, and explode it. You discovered it yourself. The result 
is an object of type
Read a => IO a
and this is all. (Well, in order to really execute it, you have to 
specify the type a anyway).


I think that nobody will convince anybody here. Steve Horne continues 
with his own visions :

 >/if you're using IO actions, your code is not referentially 
transparent and is therefore impure/

I believe that this statement is doubly erroneous, but I give up. I 
won't even ask to show me WHERE the ref. transparence is broken. This 
discussion is a dead loop...

Jerzy






-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.haskell.org/pipermail/haskell-cafe/attachments/20111229/5a29e739/attachment.htm>

