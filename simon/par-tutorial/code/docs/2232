From miguelimo38 at yandex.ru  Thu Dec 22 22:29:28 2011
From: miguelimo38 at yandex.ru (MigMit)
Date: Fri, 23 Dec 2011 01:29:28 +0400
Subject: [Haskell-cafe] If you'd design a Haskell-like language,
	what would you do different?
In-Reply-To: <3AEE194F-22A4-4E69-9EF3-A9AAB05689CB@strictlypositive.org>
References: <1324322427.2233.6.camel@fuzxxl>
	<CAO0Ooq1vMieSY3cGOpLkgGeDdN1Hpi7xsHCR=nJfEtvg2Axi5g@mail.gmail.com>
	<20111220070644.GA32105@sniper>
	<7320B5CF-0DEA-4665-9C33-A73811885264@ouroborus.net>
	<CAO0Ooq0QYWw2ntFUHd0Rf9Q6zN-p+3ocqGQS=pjeXYQ5vhFOnA@mail.gmail.com>
	<BB0E5FD7-780F-4D95-975E-40E4C1DEDEEC@yandex.ru>
	<CAO0Ooq0-Ru4TOdx+gpMRTyVZupFKgRUbbJjyqXKYuE7miTKqAg@mail.gmail.com>
	<jcvqjs$sb2$1@dough.gmane.org>
	<3AEE194F-22A4-4E69-9EF3-A9AAB05689CB@strictlypositive.org>
Message-ID: <04595744-37C5-40A3-B1EA-DE9E9DA1AA08@yandex.ru>



?????????? ? iPad

22.12.2011, ? 23:56, Conor McBride <conor at strictlypositive.org> ???????(?):

> I'd be glad if "pure" meant "total", but
> partiality were an effect supported by the run-time system. Then we
> could choose to restrict ourselves, but we wouldn't be restricted by the
> language.

I second that. Having a special "partiality" monad would be nice. However, I'm not certain as to how it would interact with recursion ? if f is a total function, fix f could be (and almost certainly would be) a possibly undiefined value. So, fix should have type "(a -> a) -> Partial a"; that's OK, but implicit uses of fix (I mean let statements) would be quite different.

> I'd like to program with an applicative notion, but
> in monadic types. That's what I'd do different, and for me, the subject
> is not a hypothetical question.

So... you are developing a programming language with all calculations being automatically lifted to a monad? What if we want to do calculations with monadic values themselves, like, for example, store a few monadic calculations in a list (without joining all there effects as the sequence function does)?



