From cdsmith at gmail.com  Fri Dec 30 00:30:17 2011
From: cdsmith at gmail.com (Chris Smith)
Date: Thu, 29 Dec 2011 16:30:17 -0700
Subject: [Haskell-cafe] On the purity of Haskell
In-Reply-To: <4EFCE34B.3010403@blueyonder.co.uk>
References: <4EFB5468.4000607@blueyonder.co.uk>
	<jdfv46$7r3$1@dough.gmane.org> <4EFB8DFE.1060805@blueyonder.co.uk>
	<jdh9h6$gba$1@dough.gmane.org> <4EFCA66D.4060609@blueyonder.co.uk>
	<20111229180451.BFF53F3937@mail.avvanta.com>
	<1325184067.16545.29.camel@godel> <4EFCBC99.60906@blueyonder.co.uk>
	<1325193613.16545.57.camel@godel> <4EFCE34B.3010403@blueyonder.co.uk>
Message-ID: <1325201417.16545.96.camel@godel>

Sorry to cut most of this out, but I'm trying to focus on the central
point here.

On Thu, 2011-12-29 at 22:01 +0000, Steve Horne wrote:
> In pure functional terms, the result should be equivalent to a fully
> evaluated value - but putStrLn isn't pure. It cannot be fully
> evaluated until run-time.

And here it is, I think.  You're insisting on viewing the performing of
some effect as part of the evaluation of an expression, even though the
language is explicitly and intentionally designed not to conflate those
two ideas.  Effects do not happen as a side-effect of evaluating
expressions.  Instead they happen because you define the symbol 'main'
to be the effect that you want to perform, and then set the runtime
system to work on performing it by running your program.

Evaluation and effects are just not the same thing, and it makes no
sense to say something isn't "evaluated" just because the effect it
describes haven't been performed.  It's exactly that distinction -- the
refusal to conflate evaluation with performing effects -- that is
referred to when Haskell is called a pure language.

-- 
Chris Smith




