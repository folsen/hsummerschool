From michael at snoyman.com  Fri Feb  4 10:01:34 2011
From: michael at snoyman.com (Michael Snoyman)
Date: Fri, 4 Feb 2011 11:01:34 +0200
Subject: [Haskell-cafe] AES on 32-bit system
In-Reply-To: <20110204090002.GA20264@snarc.org>
References: <AANLkTi=BQsuAF-Hmp94n6NqKU_P_rrv+17_rfVHVkpo7@mail.gmail.com>
	<20110204090002.GA20264@snarc.org>
Message-ID: <AANLkTiknWYKycFDn+dKgS8k0rObqnv6iST7Bd-=Yk2t0@mail.gmail.com>

On Fri, Feb 4, 2011 at 11:00 AM, Vincent Hanquez <tab at snarc.org> wrote:
> On Fri, Feb 04, 2011 at 08:00:24AM +0200, Michael Snoyman wrote:
>> Hi everyone,
>>
>> Does anyone else have trouble installing the AES package on a 32-bit
>> system? My system at home installs it just fine, but my VPS chokes
>> with the following error messages (plus a bunch of warnings):
>>
>> cbits/ctr_inc.c:11:0:
>> ? ? ?error: 'uint_64t' undeclared (first use in this function)
>>
>> cbits/ctr_inc.c:11:0:
>> ? ? ?error: (Each undeclared identifier is reported only once
>>
>> cbits/ctr_inc.c:11:0: ?error: for each function it appears in.)
>>
>> cbits/ctr_inc.c:11:0:
>> ? ? ?error: 'ctr' undeclared (first use in this function)
>>
>> cbits/ctr_inc.c:11:0: ?error: expected expression before ')' token
>>
>> It's actually for this very reason that I'm still maintaining the
>> OpenSSL backend for http-enumerator: I think the tls package is stable
>> enough now to be used in production environments (kudos to Vincent by
>> the way). However, I can't use it in production if I can't build one
>> of its dependencies. This bug is also preventing me from adding some
>> nice features to http-enumerator, such as checking validity of SSL
>> certificates.
>>
>> Anyone have any thoughts?
>
> Hi Michael,
>
> well, Thomas DuBuisson and I talked about it couple of days ago, and i'm probably
> going to incorporate AES into cryptocipher directly, so dropping the dependancy
> problem.
>
> I'm not a big fan of the C implementation, so i'll be looking into replacing it by
> an implementation i made couple of years back (providing it's at least providing the
> same level of performance), and adding support to AES-NI (although I've heard that
> someone else might be working into that as well).

That sounds even better :). You're doing an amazing job with tls, keep it up!

Michael


