From conal at conal.net  Fri Dec 30 20:29:07 2011
From: conal at conal.net (Conal Elliott)
Date: Fri, 30 Dec 2011 11:29:07 -0800
Subject: [Haskell-cafe] On the purity of Haskell
In-Reply-To: <EC631798-2BB6-4D56-9FC6-526B794B4EAE@mobileink.com>
References: <4EFB5468.4000607@blueyonder.co.uk> <jdfv46$7r3$1@dough.gmane.org>
	<4EFB8DFE.1060805@blueyonder.co.uk> <jdh9h6$gba$1@dough.gmane.org>
	<4EFCA66D.4060609@blueyonder.co.uk> <jdiesl$5sp$1@dough.gmane.org>
	<4EFCCA86.4020709@blueyonder.co.uk> <jdjtv1$6r0$1@dough.gmane.org>
	<CAD6SzRLxjE7Xgi6dXMknwt0oFRN_m3Z868jAKnsayR=w1=Se6w@mail.gmail.com>
	<FD41967A-36F7-4203-87E3-D4392146C53D@mobileink.com>
	<CABHqrUm6W8Gw66E7S8RVQe3os5TqDQiPCn-vtuxw4aPOf2R2rA@mail.gmail.com>
	<8F4B5EDB-3653-44F1-86A9-5AEC32EFD475@mobileink.com>
	<CABHqrUmvkEJD5dX2TUvj3_HF0sD+BpbPu2Mn4to7=oqXcxAkdQ@mail.gmail.com>
	<FE478236-BE49-4C1C-941A-B51AB1CDD043@mobileink.com>
	<CAD6SzRLeZ-r0Ebzz5pSeSWVtw=5RPc7aCYyQB_DxfqC+NhXA4w@mail.gmail.com>
	<EC631798-2BB6-4D56-9FC6-526B794B4EAE@mobileink.com>
Message-ID: <CAD6SzR+uMDOcYZsnd0qrS3aedMO4Uc7rminNLHGwsZWv32t=cg@mail.gmail.com>

On Fri, Dec 30, 2011 at 10:24 AM, Gregg Reynolds <dev at mobileink.com> wrote:

>
> On Dec 30, 2011, at 11:43 AM, Conal Elliott wrote:
>
> roof: f is a function, and it is taking the same argument each time.
>> Therefore the result is the same each time.
>>
>>
>> That's called begging the question.  f is not a function, so I guess your
>> proof is flawed.
>>
>> It seems pretty clear that we're working with different ideas of what
>> constitutes a function.  When I use the term, I intend what I take to be
>> the standard notion of a function in computation: not just a unique mapping
>> from one input to one output, but one where the output is computable from
>> the input.  Any "function" that depends on a non-computable component is by
>> that definition not a true function.  For clarity let's call such critters
>>  quasi-functions, so we can retain the notion of application.  Equality
>> cannot be defined for quasi-functions, for obvious reasons.
>>
>> f is a quasi-function because it depends on getAnIntFromUser, which is
>> not definable and is obviously not a function.  When applied to an argument
>> like 42, it yields another quasi-function, and therefore "f 42 = f 42" is
>> false, or at least unknown, and the same goes for f 42 != f 42 I suppose.
>>
>> -Gregg
>>
>
> Please don't redefine "function" to mean "computable function". Besides
> distancing yourself from math, I don't think doing so really helps your
> case.
>
>
> No redefinition involved, just a narrowing of scope.  I assume that, since
> we are talking about computation, it is reasonable to limit  the discussion
> to the class of computable functions - which, by the way, are about as
> deeply embedded in orthodox mathematics as you can get, by way of recursion
> theory.  What would be the point of talking about non-computable functions
> for the semantics of a programming language?
>
> And on what do you base your claim that getAnIntFromUser is not definable?
>
>
> Sorry, not definable might a little strong.  "Not definable in the way we
> can define computable functions" work better?  In any case I think you
> probably see what I'm getting at.
>
> Or that applying it (what?) to 42 gives a quasi-function?
>
>
> I can't think of a way to improve on what I've already written at the
> moment - it too would depend on IO - so if my meaning is not clear, so be
> it.
>
> Wait, here's another way of looking at it.  Think of IO actions as random
> variables.  So instead of getAnIntFromUser, use X as an integer random
> variable yielding something like:
>
>  f :: Int -> IO Int
>  f x = X >>= \i -> return (i+x)
>
> I would not call this f a function because I don't think it answers to the
> commonly accepted definition of a function.  Ditto for the result of
> applying it to 42.  Others obviously might consider it a function.  De
> gustibus non set disputandem.
>
> -Gregg
>

I'm recommending a shift to more well-defined terms in hopes to move this
discussion away from tastes & opinions and from what's obvious (even if
untrue or ill-defined).

If you look at the signature of 'f', you can see that it's declared to be a
function (and a computable one at that). To demonstrate that it's not
actually a function, I'd expect you to show that it's one-to-many, which
then raises the question of equality, as needed to distinguish one from
many.

- Conal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.haskell.org/pipermail/haskell-cafe/attachments/20111230/2836a876/attachment.htm>

