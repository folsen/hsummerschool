From dons00 at gmail.com  Tue Apr 19 22:11:00 2011
From: dons00 at gmail.com (Don Stewart)
Date: Tue, 19 Apr 2011 13:11:00 -0700
Subject: [Haskell-cafe] Painless parallelization.
In-Reply-To: <662211303239092@web69.yandex.ru>
References: <662211303239092@web69.yandex.ru>
Message-ID: <BANLkTik=BQcJC7srER8KSabtM0d=q8vHug@mail.gmail.com>

> to write a pure functional parallel code with the level of abstraction I used in Haskell?

The status of parallel programming in Haskell is loosely maintained here:


http://stackoverflow.com/questions/3063652/whats-the-status-of-multicore-programming-in-haskell/3063668#3063668

Your options, as of today,

 * The par-monad package and a monad for deterministic parallelism,
Simon Marlow -- more control over pure parallelism than
strategies/par/pseq.

 * The "parallel" package

 * Repa (parallel arrays)

 * DPH (for more experimenetal use)

 * Explict thread-based shared memory concurrency and multicore
parallelism (forkIO/MVars/STM)

On Tue, Apr 19, 2011 at 11:51 AM, Grigory Sarnitskiy <sargrigory at ya.ru> wrote:
> Hello, I'm searching a way to benefit from modern hardware in my programs.
>
> I consider parallel programing to be actually easier than sequential one. Parallel computation allows to avoid sophisticated algorithms that were developed to gain performance on sequential architecture. It should also allow to stop bothering about using immutable objects --- immutable parallel arrays should be as fast as mutable ones, right? (provided there is enough cores)
>
> So what are the options to write a pure functional parallel code with the level of abstraction I used in Haskell? So far I've found Data Parallel Haskell for multicore CPU's and Data.Array.Accelerate for GPU's. It would be nice to have something at the release state, rather than some beta.
>
> _______________________________________________
> Haskell-Cafe mailing list
> Haskell-Cafe at haskell.org
> http://www.haskell.org/mailman/listinfo/haskell-cafe
>


