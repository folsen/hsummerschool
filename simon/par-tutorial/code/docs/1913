From gcrosswhite at gmail.com  Wed Dec 14 07:10:17 2011
From: gcrosswhite at gmail.com (Gregory Crosswhite)
Date: Wed, 14 Dec 2011 16:10:17 +1000
Subject: [Haskell-cafe] Splitting off many/some from Alternative
In-Reply-To: <CACw0niKAp9HWV3qxBm6bN5Z2Z9yUVeTw9H9S9DERH9ofrWaXKQ@mail.gmail.com>
References: <1FA8D361-5F28-4FE4-AAE8-1761B98E6381@gmail.com>
	<CACw0niK9Bv6q3UxMk8XHtb_=6KsrHTn-4mkjhDDEUX_LdmAqYQ@mail.gmail.com>
	<CAECnf4DtEDnf4Z+Z7MKZ731f+c6t+ZGLDPkTDWt36MSsqXLm4g@mail.gmail.com>
	<CACw0ni+xEokzO6K7gkGT=SwaggGqG-HkNq+bsyqvj4ZQFaKhwg@mail.gmail.com>
	<CAECnf4ApS=L-YmMLUTCpB7b+kqv3Dps15irucqrngybxau_iAQ@mail.gmail.com>
	<CACw0niKAp9HWV3qxBm6bN5Z2Z9yUVeTw9H9S9DERH9ofrWaXKQ@mail.gmail.com>
Message-ID: <CFA58A9C-FA80-4D51-92EA-0A4D7CC3634D@gmail.com>


On Dec 13, 2011, at 5:09 AM, Bryan O'Sullivan wrote:

> Correct. And your example of "some (Just 1)" inflooping was not a counterargument, but rather an illustration that perhaps some people (and I'm not trying to imply you here, don't worry) don't understand what some and many are supposed to do.

But does it really make sense to have class methods with the property that they are undefined on all but a special value of a type?  It seems extremely silly to me to keep these two methods in the class and to get around this problem by adding documentation that essentially says, "Don't use these methods because they are not actually defined in general."

Cheers,
Greg
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.haskell.org/pipermail/haskell-cafe/attachments/20111214/9462afd4/attachment.htm>

