From donn at avvanta.com  Thu Dec 29 20:32:02 2011
From: donn at avvanta.com (Donn Cave)
Date: Thu, 29 Dec 2011 11:32:02 -0800 (PST)
Subject: [Haskell-cafe] On the purity of Haskell
In-Reply-To: <4EFCBC99.60906@blueyonder.co.uk>
References: <4EFB5468.4000607@blueyonder.co.uk> <jdfv46$7r3$1@dough.gmane.org>
	<4EFB8DFE.1060805@blueyonder.co.uk> <jdh9h6$gba$1@dough.gmane.org>
	<4EFCA66D.4060609@blueyonder.co.uk>
	<20111229180451.BFF53F3937@mail.avvanta.com>
	<1325184067.16545.29.camel@godel> <4EFCBC99.60906@blueyonder.co.uk>
Message-ID: <20111229193202.85716276C45@mail.avvanta.com>

Quoth Steve Horne <sh006d3592 at blueyonder.co.uk>,
> On 29/12/2011 18:41, Chris Smith wrote:
...
>> On Thu, 2011-12-29 at 10:04 -0800, Donn Cave wrote:
>>> We can talk endlessly about what your external/execution results
>>> might be for some IO action, but at the formulaic level of a Haskell
>>> program it's a simple function value, e.g., IO Int.

>> Not to nitpick, but I'm unsure what you might mean by "function value"
>> there.  An (IO Int) is not a function value: there is no function
>> involved at all.  I think the word function is causing some confusion,
>> so I'll avoid calling things functions when they aren't.

> Except that it *is* a function value.

He's right, I should have omitted "function", I just meant "value."

I think the rest of what came out when he entered "tutorial mode"
should be very helpful, if there's anything left that remains to
be clarified about how Haskell manages to be a pure functional
language.

	Donn


