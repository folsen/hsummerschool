From felipe.lessa at gmail.com  Wed Dec 21 14:04:38 2011
From: felipe.lessa at gmail.com (Felipe Almeida Lessa)
Date: Wed, 21 Dec 2011 11:04:38 -0200
Subject: [Haskell-cafe] guided seq (Was: Interruptible threads with IO
	loops)
In-Reply-To: <1324459870.3833.9.camel@kirk>
References: <CAH-sQ5jrocgiuXiOmDaoaajkn7HRF5XWaXJK9kA2sE_cj4P0cQ@mail.gmail.com>
	<D90F9E28-E21D-4630-8BA2-D3F04E491F3D@gmail.com>
	<1324459870.3833.9.camel@kirk>
Message-ID: <CANd=OGGa6cRmRCg0m-gvwumVqSo53ccCv5aMZnAS40dr_J+vvA@mail.gmail.com>

On Wed, Dec 21, 2011 at 7:31 AM, Joachim Breitner
<mail at joachim-breitner.de> wrote:
> this problem comes up in various places; forcing the whole thunk is of
> course an option, but would it be possible ? theoretical, with the GHC
> runtime, or even with current tools ? to have a function
> ? ? ? ?evaluateUntilItDoesNotNeed :: a -> b -> a
> such that
> ? ? ? ?f x `evaluateUntilItDoesNotNeed` x
> will not retain a reference to x, but is otherwise as lazy as possible?
>
> If thunks retain references to their free variables, and these can be
> introspected, then it should be possible to keep seq?ing those thunks
> that refer to x, until the expression is either fully evaluated or no
> referenced thunk references x.

Sounds complicated.  What about

  map f xs `evaluateUntilItDoesNotNeed` xs

If it evaluated only the head of 'map f xs' then the result would not
depend on 'xs' anymore, but it would depend on the tail of 'xs'.

Cheers,

-- 
Felipe.


